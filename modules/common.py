"""Common module to provide functionalities for other modules.

"""

import logging
from settings import settings

import time
import requests
import regex

# Create a logger object for this module
logger = logging.getLogger(__name__)


class session(requests.Session):
    """Custom session class inheriting from requests.Session.

    This class provides per-instance rate limiting, automatic retry for
    certain error codes, and a default timeout.

    Attributes:
        DEFAULT_TIMEOUT (int): Default timeout for requests.
        RETRY_CODES (list): List of HTTP status codes to be retried.
        MAX_RETRIES (int): Maximum number of retries.
        GET_RATE_LIMIT (float): Time (in seconds) to wait between GET requests.
        POST_RATE_LIMIT (float): Time (in seconds) to wait between POST requests.
        last_request_time (float): Timestamp of the last request made.
    """

    def __init__(self,
                 timeout=60,
                 retry_codes=[429, 503],
                 max_retries=3,
                 get_rate_limit=0.01,
                 post_rate_limit=0.01):
        """Initialize a new CustomSession instance.

        Args:
            timeout (int): Default timeout for requests.
            retry_codes (list): List of HTTP status codes to be retried.
            max_retries (int): Maximum number of retries.
            get_rate_limit (float): Time (in seconds) to wait between GET requests.
            post_rate_limit (float): Time (in seconds) to wait between POST requests.
        """
        super(session, self).__init__()

        self.DEFAULT_TIMEOUT = timeout
        self.RETRY_CODES = retry_codes
        self.MAX_RETRIES = max_retries
        self.GET_RATE_LIMIT = get_rate_limit
        self.POST_RATE_LIMIT = post_rate_limit
        self.last_request_time = 0

    def request(self, method, url, **kwargs):
        """Override the request method to include rate limiting, retries, and default timeout.

        Args:
            method (str): HTTP method (e.g., 'GET', 'POST').
            url (str): URL to send the request to.
            **kwargs: Additional keyword arguments to pass to the request.

        Returns:
            response: Response object returned from the request.
        """
        # Set default timeout if not provided
        if 'timeout' not in kwargs:
            kwargs['timeout'] = self.DEFAULT_TIMEOUT

        # Ensure rate limiting
        elapsed_time = time.time() - self.last_request_time
        if method == 'GET' and elapsed_time < self.GET_RATE_LIMIT:
            time.sleep(self.GET_RATE_LIMIT - elapsed_time)
        elif method == 'POST' and elapsed_time < self.POST_RATE_LIMIT:
            time.sleep(self.POST_RATE_LIMIT - elapsed_time)

        retries = 0
        while retries < self.MAX_RETRIES:
            try:
                response = super(session, self).request(method, url, **kwargs)

                self.last_request_time = time.time()

                if response.status_code in self.RETRY_CODES:
                    logger.error(f"request error: {response.status_code} - retrying...")
                    retries += 1
                    if method == 'GET':
                        time.sleep(self.GET_RATE_LIMIT)
                    elif method == 'POST':
                        time.sleep(self.POST_RATE_LIMIT)
                    continue

                return response

            except requests.RequestException as e:
                logger.error(f"request error: {e}")
                retries += 1
                if method == 'GET':
                    time.sleep(self.GET_RATE_LIMIT)
                elif method == 'POST':
                    time.sleep(self.POST_RATE_LIMIT)

        logger.error(f"failed to fetch URL {url} after {self.MAX_RETRIES} attempts")
        return None

    def get(self, url, **kwargs):
        """Override the GET method to use the custom request method.

        Args:
            url (str): URL to send the GET request to.
            **kwargs: Additional keyword arguments to pass to the request.

        Returns:
            response: Response object returned from the GET request.
        """
        return self.request('GET', url, **kwargs)

    def post(self, url, data=None, json=None, **kwargs):
        """Override the POST method to use the custom request method.

        Args:
            url (str): URL to send the POST request to.
            data (dict, optional): Data to send in the POST request.
            json (dict, optional): JSON data to send in the POST request.
            **kwargs: Additional keyword arguments to pass to the request.

        Returns:
            response: Response object returned from the POST request.
        """
        return self.request('POST', url, data=data, json=json, **kwargs)


class match:

    video_formats = regex.compile(
        r'(\.)(YUV|WMV|WEBM|VOB|VIV|SVI|ROQ|RMVB|RM|OGV|OGG|NSV|MXF|MTS|M2TS|TS|MPG|MPEG|M2V|MP2|MPE|MPV|MP4|M4P|M4V|MOV|QT|MNG|MKV|FLV|DRC|AVI|ASF|AMV)$', regex.I)

    subtitle_formats = regex.compile(
        r'(\.)(SRT|ASS|VTT|SUB|IDX|PGS)$', regex.I)

    season_formats = regex.compile(r'(?:season|s)[\.\-\_\s]?(\d+)', regex.I)

    episode_formats = regex.compile(r'(?:episode|e)[\.\-\_\s]?(\d+)', regex.I)
    sample_formats = regex.compile(r'(sample)', regex.I)

    flag_to_primary_language = {
        "ðŸ‡¦ðŸ‡«": "PS", "ðŸ‡¦ðŸ‡±": "SQ", "ðŸ‡©ðŸ‡¿": "AR", "ðŸ‡¦ðŸ‡¸": "EN", "ðŸ‡¦ðŸ‡©": "CA",
        "ðŸ‡¦ðŸ‡´": "PT", "ðŸ‡¦ðŸ‡®": "EN", "ðŸ‡¦ðŸ‡¶": "EN", "ðŸ‡¦ðŸ‡¬": "EN", "ðŸ‡¦ðŸ‡·": "ES",
        "ðŸ‡¦ðŸ‡²": "HY", "ðŸ‡¦ðŸ‡¼": "NL", "ðŸ‡¦ðŸ‡º": "EN", "ðŸ‡¦ðŸ‡¹": "DE", "ðŸ‡¦ðŸ‡¿": "AZ",
        "ðŸ‡§ðŸ‡¸": "EN", "ðŸ‡§ðŸ‡­": "AR", "ðŸ‡§ðŸ‡©": "BN", "ðŸ‡§ðŸ‡§": "EN", "ðŸ‡§ðŸ‡¾": "BE",
        "ðŸ‡§ðŸ‡ª": "NL", "ðŸ‡§ðŸ‡¿": "EN", "ðŸ‡§ðŸ‡¯": "FR", "ðŸ‡§ðŸ‡²": "EN", "ðŸ‡§ðŸ‡¹": "DZ",
        "ðŸ‡§ðŸ‡´": "ES", "ðŸ‡§ðŸ‡¦": "BS", "ðŸ‡§ðŸ‡¼": "EN", "ðŸ‡§ðŸ‡·": "PT", "ðŸ‡®ðŸ‡´": "EN",
        "ðŸ‡»ðŸ‡¬": "EN", "ðŸ‡§ðŸ‡³": "MS", "ðŸ‡§ðŸ‡¬": "BG", "ðŸ‡§ðŸ‡«": "FR", "ðŸ‡§ðŸ‡®": "RN",
        "ðŸ‡°ðŸ‡­": "KM", "ðŸ‡¨ðŸ‡²": "FR", "ðŸ‡¨ðŸ‡¦": "EN", "ðŸ‡®ðŸ‡¨": "ES", "ðŸ‡¨ðŸ‡»": "PT",
        "ðŸ‡§ðŸ‡¶": "NL", "ðŸ‡°ðŸ‡¾": "EN", "ðŸ‡¨ðŸ‡«": "FR", "ðŸ‡¹ðŸ‡©": "AR", "ðŸ‡¨ðŸ‡±": "ES",
        "ðŸ‡¨ðŸ‡³": "ZH", "ðŸ‡¨ðŸ‡½": "EN", "ðŸ‡¨ðŸ‡¨": "EN", "ðŸ‡¨ðŸ‡´": "ES", "ðŸ‡°ðŸ‡²": "AR",
        "ðŸ‡¨ðŸ‡¬": "FR", "ðŸ‡¨ðŸ‡©": "FR", "ðŸ‡¨ðŸ‡°": "EN", "ðŸ‡¨ðŸ‡·": "ES", "ðŸ‡­ðŸ‡·": "HR",
        "ðŸ‡¨ðŸ‡º": "ES", "ðŸ‡¨ðŸ‡¼": "NL", "ðŸ‡¨ðŸ‡¾": "EL", "ðŸ‡¨ðŸ‡¿": "CS", "ðŸ‡©ðŸ‡°": "DA",
        "ðŸ‡©ðŸ‡¯": "FR", "ðŸ‡©ðŸ‡²": "EN", "ðŸ‡©ðŸ‡´": "ES", "ðŸ‡ªðŸ‡¨": "ES", "ðŸ‡ªðŸ‡¬": "AR",
        "ðŸ‡¸ðŸ‡»": "ES", "ðŸ‡¬ðŸ‡¶": "ES", "ðŸ‡ªðŸ‡·": "TI", "ðŸ‡ªðŸ‡ª": "ET", "ðŸ‡¸ðŸ‡¿": "EN",
        "ðŸ‡ªðŸ‡¹": "AM", "ðŸ‡«ðŸ‡°": "EN", "ðŸ‡«ðŸ‡´": "FO", "ðŸ‡«ðŸ‡¯": "EN", "ðŸ‡«ðŸ‡®": "FI",
        "ðŸ‡«ðŸ‡·": "FR", "ðŸ‡¬ðŸ‡«": "FR", "ðŸ‡µðŸ‡«": "FR", "ðŸ‡¹ðŸ‡«": "FR", "ðŸ‡¬ðŸ‡¦": "FR",
        "ðŸ‡¬ðŸ‡²": "EN", "ðŸ‡¬ðŸ‡ª": "KA", "ðŸ‡©ðŸ‡ª": "DE", "ðŸ‡¬ðŸ‡­": "EN", "ðŸ‡¬ðŸ‡®": "EN",
        "ðŸ‡¬ðŸ‡·": "EL", "ðŸ‡¬ðŸ‡±": "KL", "ðŸ‡¬ðŸ‡©": "EN", "ðŸ‡¬ðŸ‡µ": "FR", "ðŸ‡¬ðŸ‡º": "EN",
        "ðŸ‡¬ðŸ‡¹": "ES", "ðŸ‡¬ðŸ‡¬": "EN", "ðŸ‡¬ðŸ‡³": "FR", "ðŸ‡¬ðŸ‡¼": "PT", "ðŸ‡¬ðŸ‡¾": "EN",
        "ðŸ‡­ðŸ‡¹": "FR", "ðŸ‡­ðŸ‡²": "EN", "ðŸ‡­ðŸ‡³": "ES", "ðŸ‡­ðŸ‡°": "ZH", "ðŸ‡­ðŸ‡º": "HU",
        "ðŸ‡®ðŸ‡¸": "IS", "ðŸ‡®ðŸ‡³": "HI", "ðŸ‡®ðŸ‡©": "ID", "ðŸ‡®ðŸ‡·": "FA", "ðŸ‡®ðŸ‡¶": "AR",
        "ðŸ‡®ðŸ‡ª": "EN", "ðŸ‡®ðŸ‡²": "EN", "ðŸ‡®ðŸ‡±": "HE", "ðŸ‡®ðŸ‡¹": "IT", "ðŸ‡¯ðŸ‡²": "EN",
        "ðŸ‡¯ðŸ‡µ": "JA", "ðŸ‡¯ðŸ‡ª": "EN", "ðŸ‡¯ðŸ‡´": "AR", "ðŸ‡°ðŸ‡¿": "KK", "ðŸ‡°ðŸ‡ª": "SW",
        "ðŸ‡°ðŸ‡®": "EN", "ðŸ‡½ðŸ‡°": "SQ", "ðŸ‡°ðŸ‡¼": "AR", "ðŸ‡°ðŸ‡¬": "KY", "ðŸ‡±ðŸ‡¦": "LO",
        "ðŸ‡±ðŸ‡»": "LV", "ðŸ‡±ðŸ‡§": "AR", "ðŸ‡±ðŸ‡¸": "EN", "ðŸ‡±ðŸ‡·": "EN", "ðŸ‡±ðŸ‡¾": "AR",
        "ðŸ‡±ðŸ‡®": "DE", "ðŸ‡±ðŸ‡¹": "LT", "ðŸ‡±ðŸ‡º": "FR", "ðŸ‡²ðŸ‡´": "ZH", "ðŸ‡²ðŸ‡¬": "FR",
        "ðŸ‡²ðŸ‡¼": "EN", "ðŸ‡²ðŸ‡¾": "MS", "ðŸ‡²ðŸ‡»": "DV", "ðŸ‡¬ðŸ‡§": "EN", "ðŸ‡©ðŸ‡ª": "DE",
        "ðŸ‡«ðŸ‡·": "FR", "ðŸ‡ªðŸ‡¸": "ES", "ðŸ‡®ðŸ‡¹": "IT", "ðŸ‡³ðŸ‡¿": "EN", "ðŸ‡¨ðŸ‡º": "ES",
        "ðŸ‡·ðŸ‡º": "RU", "ðŸ‡¨ðŸ‡³": "ZH", "ðŸ‡¯ðŸ‡µ": "JA", "ðŸ‡°ðŸ‡·": "KO", "ðŸ‡¸ðŸ‡¦": "AR",
        "ðŸ‡¹ðŸ‡·": "TR", "ðŸ‡®ðŸ‡³": "HI", "ðŸ‡®ðŸ‡©": "ID", "ðŸ‡§ðŸ‡·": "PT", "ðŸ‡µðŸ‡°": "UR",
        "ðŸ‡³ðŸ‡¬": "EN", "ðŸ‡§ðŸ‡©": "BN", "ðŸ‡²ðŸ‡½": "ES", "ðŸ‡µðŸ‡­": "TL", "ðŸ‡»ðŸ‡³": "VI",
        "ðŸ‡ªðŸ‡¹": "AM", "ðŸ‡ªðŸ‡¬": "AR", "ðŸ‡©ðŸ‡ª": "DE", "ðŸ‡®ðŸ‡·": "FA", "ðŸ‡¹ðŸ‡­": "TH",
        "ðŸ‡¬ðŸ‡§": "EN", "ðŸ‡«ðŸ‡·": "FR", "ðŸ‡®ðŸ‡¹": "IT", "ðŸ‡²ðŸ‡¦": "AR", "ðŸ‡¦ðŸ‡º": "EN",
        "ðŸ‡²ðŸ‡¾": "MS", "ðŸ‡ºðŸ‡¦": "UK", "ðŸ‡¿ðŸ‡¦": "ZU", "ðŸ‡µðŸ‡±": "PL", "ðŸ‡¨ðŸ‡´": "ES",
        "ðŸ‡¦ðŸ‡·": "ES", "ðŸ‡¨ðŸ‡¦": "EN", "ðŸ‡²ðŸ‡²": "MY", "ðŸ‡»ðŸ‡ª": "ES", "ðŸ‡µðŸ‡ª": "ES",
        "ðŸ‡³ðŸ‡µ": "NE", "ðŸ‡¸ðŸ‡¬": "EN", "ðŸ‡´ðŸ‡²": "AR", "ðŸ‡¸ðŸ‡ª": "SE", "ðŸ‡µðŸ‡¹": "PT"
    }

    def video(filename):
        return bool(regex.search(match.video_formats, filename) and not regex.search(match.sample_formats, filename))

    def subtitle(filename):
        return bool(regex.search(match.subtitle_formats, filename))

    def season(filename):
        season = regex.search(match.season_formats, filename)
        if season:
            return int(season.group(1))
        else:
            return None

    def episode(filename):
        episode = regex.search(match.episode_formats, filename)
        if episode:
            return int(episode.group(1))
        else:
            return None


class releases:
    def print(list):
        strings = []
        longest_res = 0
        longest_cached = 0
        longest_title = 0
        longest_size = 0
        longest_langs = 0
        longest_index = 0
        longest_seeders = 0
        for index, release in enumerate(list):
            release['printsize'] = str(round(release['size'], 2))
            if len('/'.join(release['cached'])) > longest_cached:
                longest_cached = len('/'.join(release['cached']))
            if len(release['title']) > longest_title:
                longest_title = len(release['title'])
            if len(str(release['resolution'])) > longest_res:
                longest_res = len(str(release['resolution']))
            if len(str(release['printsize'])) > longest_size:
                longest_size = len(str(release['printsize']))
            if len('/'.join(release['languages'])) > longest_langs:
                longest_langs = len('/'.join(release['languages']))
            if len(str(release['seeders'])) > longest_seeders:
                longest_seeders = len(str(release['seeders']))
            if len(str(index + 1)) > longest_index:
                longest_index = len(str(index + 1))
        for index, release in enumerate(list):
            i = str(index + 1) + ") " + ' ' * (longest_index - len(str(index + 1)))
            resolution = "resolution: " + str(release['resolution']) + ' ' * \
                (longest_res - len(str(release['resolution'])))
            langs = " | languages: " + '/'.join(release['languages']) + ' ' * \
                (longest_langs - len('/'.join(release['languages'])))
            title = " | title: " + release['title'] + ' ' * (longest_title - len(release['title']))
            size = " | size: " + str(release['printsize']) + ' ' * (longest_size - len(str(release['printsize'])))
            cached = " | cached: " + '/'.join(release['cached']) + ' ' * \
                (longest_cached - len('/'.join(release['cached'])))
            seeders = " | seeders: " + str(release['seeders']) + ' ' * (longest_seeders - len(str(release['seeders'])))
            source = " | source: " + release['source']
            strings += [i + resolution + langs + title + size + cached + seeders + source]
        return strings

    def type_filter(list, type, s, e):
        if type == 'movie':
            for release in list[:]:
                if release['videos'] == 0:
                    list.remove(release)
                    continue
                for version in release['versions'][:]:
                    if version['videos'] == 0:
                        release['versions'].remove(version)
            for release in list:
                release['type'] = "movie"
            return list
        seasons = set(s)
        if len(s) > 1:
            for release in list[:]:
                if len(seasons - set(release['seasons'])) > len(s) / 2 or release['episodes'] <= 1:
                    list.remove(release)
                    continue
                for version in release['versions'][:]:
                    if len(seasons - set(version['seasons'])) > len(s) / 2 or version['episodes'] <= 1:
                        release['versions'].remove(version)
            for release in list:
                release['type'] = "show"
            return list
        if not e:
            for release in list[:]:
                if seasons - set(release['seasons']) or release['episodes'] <= 1:
                    list.remove(release)
                    continue
                for version in release['versions'][:]:
                    if seasons - set(version['seasons']) or version['episodes'] <= 1:
                        release['versions'].remove(version)
            for release in list:
                release['type'] = "show"
            return list
        for release in list[:]:
            if seasons - set(release['seasons']) or not release['episodes'] == 1:
                list.remove(release)
                continue
            for version in release['versions'][:]:
                if seasons - set(version['seasons']) or not version['episodes'] == 1:
                    release['versions'].remove(version)
            for release in list:
                release['type'] = "show"
        return list

    def sort(server, list):
        for filter in server.FILTERS:
            list = [release for release in list if eval(filter)]
        list.sort(key=lambda x: x['episodes'], reverse=True)
        for rule in server.RULES:
            list.sort(key=lambda release: eval(rule), reverse=True)
        return list
